<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="../data/chrome_debian/raw_code/7664_0.c"><function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name> <parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list> <block>{<block_content>
 <expr_stmt><expr><call><name>print_version</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
 <expr_stmt><expr><call><name>puts</name> <argument_list>( <argument><expr><literal type="string">"By Monty, for your professional use"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
 <expr_stmt><expr><call><name>puts</name> <argument_list>( <argument><expr><literal type="string">"This software comes with NO WARRANTY: see the PUBLIC for details.\n"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
 <expr_stmt><expr><call><name>puts</name> <argument_list>( <argument><expr><literal type="string">"Description, check and repair of MyISAM tables."</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
 <expr_stmt><expr><call><name>puts</name> <argument_list>( <argument><expr><literal type="string">"Used without options all tables on the command will be checked for errors"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
 <expr_stmt><expr><call><name>printf</name> <argument_list>( <argument><expr><literal type="string">"Usage: %s [OPTIONS] tables[.MYI]\n"</literal></expr></argument> , <argument><expr><name>my_progname_short</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
 <expr_stmt><expr><call><name>printf</name> <argument_list>( <argument><expr><literal type="string">"\nGlobal options:\n"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
 <cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>DBUG_OFF</name> <name>printf</name> <name>(</name> <name>"</name><name>\ -#, --debug=... Output debug log. Often this is 'd:t:o,filename'.\n"</name> <name>)</name> <name>;</name></cpp:ifndef>
 <cpp:endif># <cpp:directive>endif</cpp:directive> printf ( "\ -H, --HELP Display this help and exit.\n\ -?, --help Display this help and exit.\n\ -t, --tmpdir=path Path for temporary files. Multiple paths can be\n\ specified, separated by " ) ;</cpp:endif>
 <cpp:if># <cpp:directive>if</cpp:directive> <expr><macro><name>defined</name> <argument_list>( <argument>__WIN__</argument> )</argument_list></macro> <call><name>printf</name> <argument_list>( <argument><expr><literal type="string">"semicolon (;</literal></expr></argument></argument_list></call></expr></cpp:if>
)</block_content>" ) ;
 # else printf ( "colon (:</block></function>)<expr_stmt><expr><literal type="string">" ) ;
 # endif printf ( "</literal></expr><operator>,</operator> <expr><name>they</name> <name>will</name> <name>be</name> <name>used</name><operator>\</operator><name>n</name><operator>\</operator> <name>in</name> <name>a</name> <name>round</name><operator>-</operator><name>robin</name> <name><name>fashion</name><operator>.</operator><name/></name>\<name>n</name><operator>\</operator> <operator>-</operator><name>s</name></expr><operator>,</operator> <expr><operator>--</operator><name>silent</name> <name>Only</name> <name>print</name> <name><name>errors</name><operator>.</operator> <name>One</name></name> <name>can</name> <name>use</name> <name>two</name> <operator>-</operator><name>s</name> <name>to</name> <name>make</name><operator>\</operator><name>n</name><operator>\</operator> <name>myisamchk</name> <name>very</name> <name><name>silent</name><operator>.</operator><name/></name>\<name>n</name><operator>\</operator> <operator>-</operator><name>v</name></expr><operator>,</operator> <expr><operator>--</operator><name>verbose</name> <name>Print</name> <name>more</name> <name><name>information</name><operator>.</operator> <name>This</name></name> <name>can</name> <name>be</name> <name>used</name> <name>with</name><operator>\</operator><name>n</name><operator>\</operator> <operator>--</operator><name>description</name> <name>and</name> <operator>--</operator><name><name>check</name><operator>.</operator> <name>Use</name></name> <name>many</name> <operator>-</operator><name>v</name></expr></expr_stmt> <for>for more verbosity.\n\ -V<operator>,</operator> <expr_stmt><expr><operator>--</operator><name>version</name> <name>Print</name> <name>version</name> <name>and</name> <name><name>exit</name><operator>.</operator><name/></name>\<name>n</name><operator>\</operator> <operator>-</operator><name>w</name></expr><operator>,</operator> <expr><operator>--</operator><name>wait</name> <name>Wait</name></expr></expr_stmt></for> <if_stmt><if>if table is locked.\n\n" ) ;
 # ifdef DEBUG puts ( " --start-check-pos=# Start reading file at given offset.\n" ) ;
 # endif puts ( "Check options <condition>(<expr><name>check</name> <name>is</name> <name>the</name> default <name>action</name></expr></condition></if></if_stmt> <for>for myisamchk</for>):<expr_stmt><expr><operator>\</operator><name>n</name><operator>\</operator> <operator>-</operator><name>c</name></expr><operator>,</operator> <expr><operator>--</operator><name>check</name> <name>Check</name> <name>table</name></expr></expr_stmt> <for>for errors.\n\ -e<operator>,</operator> <expr_stmt><expr><operator>--</operator><name>extend</name><operator>-</operator><name>check</name> <name>Check</name> <name>the</name> <name>table</name> <name>VERY</name> <name><name>throughly</name><operator>.</operator> <name>Only</name></name> <name>use</name> <name>this</name> <name>in</name><operator>\</operator><name>n</name><operator>\</operator> <name>extreme</name> <name>cases</name> <name>as</name> <name>myisamchk</name> <name>should</name> <name>normally</name> <name>be</name> <name>able</name> <name>to</name><operator>\</operator><name>n</name><operator>\</operator> <name>find</name> <name>out</name></expr></expr_stmt></for> <if_stmt><if>if the table is ok even without this switch.\n\ -F<operator>,</operator> <expr_stmt><expr><operator>--</operator><name>fast</name> <name>Check</name> <name>only</name> <name>tables</name> <name>that</name> <name>haven</name><literal type="char">'t been closed properly.\n\ -C, --check-only-changed\n\ Check only tables that have changed since last check.\n\ -f, --force Restart with '</literal><operator>-</operator><name>r</name><literal type="char">' if there are any errors in the table.\n\ States will be updated as with '</literal><operator>--</operator><name>update</name><operator>-</operator><name>state</name><literal type="char">'.\n\ -i, --information Print statistics information about table that is checked.\n\ -m, --medium-check Faster than extend-check, but only finds 99.99% of\n\ all errors. Should be good enough for most cases.\n\ -U --update-state Mark tables as crashed if you find any errors.\n\ -T, --read-only Don'</literal><name>t</name> <name>mark</name> <name>table</name> <name>as</name> <name><name>checked</name><operator>.</operator><name/></name>\<name>n</name><literal type="string">" ) ;
 puts ( "</literal><name>Repair</name> <macro><name>options</name> <argument_list>(<argument>When using <literal type="char">'-r'</literal> or <literal type="char">'-o'</literal></argument>)</argument_list></macro><operator>:</operator><operator>\</operator><name>n</name><operator>\</operator> <operator>-</operator><name>B</name></expr><operator>,</operator> <expr><operator>--</operator><name>backup</name> <name>Make</name> <name>a</name> <name>backup</name> <name>of</name> <name><name>the</name> <operator>.</operator><name>MYD</name></name> <name>file</name> <name>as</name> <literal type="char">'filename-time.BAK'</literal><operator>.</operator><operator>\</operator><name>n</name><operator>\</operator> <operator>--</operator><name>correct</name><operator>-</operator><name>checksum</name> <name>Correct</name> <name>checksum</name> <name>information</name></expr></expr_stmt></if></if_stmt> <for>for table.\n\ -D<operator>,</operator> <expr_stmt><expr><operator>--</operator><name>data</name><operator>-</operator><name>file</name><operator>-</operator><name>length</name><operator>=</operator><operator>#</operator> <name>Max</name> <name>length</name> <name>of</name> <name>data</name> <macro><name>file</name> <argument_list>(<argument>when recreating data\n\ file when it<literal type="char">'s full).\n\ -e, --extend-check Try to recover every possible row from the data file\n\ Normally this will also find a lot of garbage rows;
\n\ Don'</literal>t use this option if you are not totally desperate.\n\ -f</argument>, <argument>--force Overwrite old temporary files.\n\ -k</argument>, <argument>--keys-used=# Tell MyISAM to update only some specific keys. # is a\n\ bit mask of which keys to use. This can be used to\n\ get faster inserts.\n\ --max-record-length=#\n\ Skip rows bigger than this if myisamchk can<literal type="char">'t allocate\n\ memory to hold it.\n\ -r, --recover Can fix almost anything except unique keys that aren'</literal>t\n\ unique.\n\ -n</argument>, <argument>--sort-recover Forces recovering with sorting even if the temporary\n\ file would be very big.\n\ -p</argument>, <argument>--parallel-recover\n\ Uses the same technique as <literal type="char">'-r'</literal> and <literal type="char">'-n'</literal></argument>, <argument>but creates\n\ all the keys in parallel</argument>, <argument>in different threads.\n\ -o</argument>, <argument>--safe-recover Uses old recovery method;
 Slower than <literal type="char">'-r'</literal> but can\n\ handle a couple of cases where <literal type="char">'-r'</literal> reports that it\n\ can<literal type="char">'t fix the data file.\n\ --character-sets-dir=...\n\ Directory where character sets are.\n\ --set-collation=name\n\ Change the collation used by the index.\n\ -q, --quick Faster repair by not modifying the data file.\n\ One can give a second '</literal>-q<literal type="char">' to force myisamchk to\n\ modify the original datafile in case of duplicate keys.\n\ NOTE: Tables where the data file is currupted can'</literal>t be\n\ fixed with this option.\n\ -u</argument>, <argument>--unpack Unpack file packed with myisampack.\n\ <literal type="string">" ) ;
 puts ( "</literal>Other actions:\n\ -a</argument>, <argument>--analyze Analyze distribution of keys. Will make some joins in\n\ MySQL faster. You can check the calculated distribution\n\ by using <literal type="char">'--description --verbose table_name'</literal>.\n\ --stats_method=name Specifies how index statistics collection code should\n\ treat NULLs. Possible values of name are \<literal type="string">"nulls_unequal\"\n\ (default for 4.1/5.0), \"nulls_equal\" (emulate 4.0), and \n\ \"nulls_ignored\".\n\ -d, --description Prints some information about table.\n\ -A, --set-auto-increment[=value]\n\ Force auto_increment to start at this or higher value\n\ If no value is given, then sets the next auto_increment\n\ value to the highest used value for the auto key + 1.\n\ -S, --sort-index Sort index blocks. This speeds up 'read-next' in\n\ applications.\n\ -R, --sort-records=#\n\ Sort records according to an index. This makes your\n\ data much more localized and may speed up things\n\ (It may be VERY slow to do a sort the first time!).\n\ -b, --block-search=#\n\ Find a record, a block at given offset belongs to."</literal></argument> )</argument_list></macro></expr> ;</expr_stmt></for>
 <expr_stmt><expr><call><name>print_defaults</name> <argument_list>( <argument><expr><literal type="string">"my"</literal></expr></argument> , <argument><expr><name>load_default_groups</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
 <expr_stmt><expr><call><name>my_print_variables</name> <argument_list>( <argument><expr><name>my_long_options</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
 }</unit>
